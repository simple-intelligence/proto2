Jan 31 Milestone:
	-Quadcopter built
		-Microcontroller
		-Sensors
	-ROS system built
		-On base
		-On copter
	-Networking between base and copter

UPDATE - 

Jan 31 - 
	Overview
		- For this deadline, we will be building the copter itself, the ROS Management system and the sensor
		management system. The primary objective for this build will be for the copter to lift off, fly the 
		recorded, demonstrated path, and then land again, change the battery, and repeat. 
		After both batteries have been depleted, the copter will wait in it's base until one is at least 80
		percent filled and then repeat the proccess. The goal is to switch the battery 5 times. 
		This trial will be outside. 
		For this build, we won't be using any GPS, but instead give it a guided path and then use the camera 
		to adjust when it comes time to land. 
		
Long term goals - 
	- Be able to have multiple ways of giving it instructions 
		- By demonstration
		- By GPS
	- Multibase system
		- Because we want this thing to be able to travel greater distances, being able to dock on multiple
		bases would be nice. But then we would have to release from one base (The ROS communication) fly
		autonomously by GPS until it can reattach to the second base.
		
	We could have copters flying all around town :)

============================================================================================================
	
**Lorin's Thoughts
	- Creating a development platform - We want as many people as possible to be using this platform
		- Using a smart phone to control it
		- Using a computer to control it
		- Flying Autonomously 
		
	In any situation, image processing is required for landing. 
	
	- Flying the drone without the base?
	- Flying the drone directly from the controller
		- While the copter is being directly controlled, if it flys within x feet of the base, 
		you can call the "land" or the "swap" function, and it will land itself. 
		- If we want to land, maybe switch if the battery being charged has a greater %
	**

**Dustin's Thoughts
	- We should use fuzzy logic for the stabalization and base finding code
		- The idea is that if were far away from the base or something pushed us way off position
			then turn the motors on full
		- If were not far away from the base or a only a small correction is needed then tell the
			motors to only turn slowly
		- The cool bit is that this can just be modeled by a simple function and we can get a
			smooth speed variation
			- It also eliminates any overcorrection and makes using a margin of error unnecessary
	** 

============================================================================================================
	
Deadlines
	- January 31st deadline - specifics - 
		- Control With Keyboard, have a "land" function
		- ROS OS -
			- Sensor Sanitizer
			- Communication Between Base and Copter 
			- Communication Between Copter and Controller
			**I don't know if we need any direct communication between the base and the controller,
			We can setup a high level command that checks if the base is availible, and if it is,
			then land. All Charging, base openening/closing, battery exchange is done automatically.
			- Camera Management 
			- Controller Management
			
		- Microcontroller - 
			- Sensor Management - 
				- Accelerometer
				- Gyroscope
				- Distance Sensor
					- Is this distance from base?
				- Downward range sensor
			- Movement/Stablisation Management
			- Motor Management
			
		- How much hardware do we need on the base?
			- Just enough to land
				- Low power computer or ???
			- Design an attachment when user doesn't have his own (Copter in field)
		- Make Copter independent of a *specific base* 
			- The Copter itself will put out its own signal. When it approaches a base, it will
			send out a request to connect. If the connection is successful, the land function will
			become available.
			- There is going to be 3 systems: Base, Copter, Controller. Where do we want to host
			ROS MASTER?
				- Where does the AR Drone host ROS MASTER?
				- Can't be on the base since the copter can be too far away
				- Come to think of it it might need to be run on all 3
			- How much power would it take to host ROS MASTER on the copter itself?
				- I'd bet not too much
				- But ROS only runs on certain distros so we will have to have those installed.
					That could add in some overhead. We'll probably need to make a small ubuntu
					distro with just what we need.
			
============================================================================================================

		Dividing Tasks - 
			- Just take out one after the other
			
		Task order - **Please help me fill this out** 
			- Broadly organize folder structure and node structure # Dustin
			- Create a Node for each function # Dustin
			- Implement movement code
				- Microcontroller level # Lorin
				- Higher level # Dustin
					- Implement the ramping up function that AR Drones have
				- Keyboard Control
			- Write nodes that get sensor data (can't really fly without this)
				- Data needs to be sanitized
					- Can be as simple as multiplying by a constant or as complex as implementing a kalman
						filter  
			- Write stabalization system
			- Implement base tracking (it's now much easier to modify to include fuzzy logic or improved
				vision)
			
